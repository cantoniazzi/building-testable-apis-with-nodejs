# Iniciando o projeto

Para iniciar um projeto em *Node.js* a primeira coisa a fazer é inicializar o *npm* no diretório onde ficará a aplicação. Para isso, primeiro certifique-se de já ter instalado o *Node.js* e o *npm* em seu computador, caso ainda não os tenha vá até o site do *Node.js* e faça o download [https://nodejs.org/en/download/](https://nodejs.org/en/download/). Ele irá instalar automaticamente também o *npm*.

## Configuração inicial
Crie o diretório onde ficará sua aplicação, após isso, dentro do diretório execute o seguinte comando:

```sh 
$ npm init
```

Semelhante ao *git*, o *npm* inicializará um novo projeto nesse diretório, depois de executar o comando o *npm* vai apresentar uma série de perguntas (não é necessário respondê-las agora, basta pressionar *enter*. Você poderá editar o arquivo de configuração depois) como:

1. **name**, referente ao nome do projeto.
2. **version**, referente a versão.
3. **description**, referente a descrição do projeto que está sendo criado.
4. **entry point**, arquivo que será o ponto de entrada caso o projeto seja importado por outro. 
5. **test command**, comando que executará os testes de aplicação. 
6. **git repository**, repositório git do projeto.
7. **keywords**, palavras chave para ajudar outros desenvolvedores a encontrar o seu projeto no *npm*.
8. **author**, autor do projeto.
9. **license** referente a licença de uso do código.

Após isso um arquivo chamado **package.json** será criado com o conteúdo semelhante a:

```json
{
  "name": "node-book",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "author": "",
    "license": "ISC"
}
```

O **package.json** é responsável por guardar as configurações *npm* do nosso projeto, nele ficarão nossos *scripts* para executar a aplicação e os testes.

## Configurando suporte ao *Ecmascript* 6

Como vimos anteriormente o *Babel* sera responsável por nos permitir usar as funcionalidades do *ES6*, para isso precisamos instalar os pacotes e configurar o nosso ambiente para suportar o *ES6* por padrão em nossa aplicação.
O primeiro passo é instalar os pacotes do *Babel*:

```sh
$ npm install --save-dev babel-cli
```

Após instalar o *Babel* é necessário instalar o *preset* que será usado, no nosso caso será o *ES6*:

```sh
$ npm install --save-dev babel-preset-node6
```

Note que sempre usamos *--save-dev* para instalar dependências referentes ao *Babel* pois ele não deve ser usado diretamente em produção, para produção vamos compilar o código, veremos isso mais adiante.

O último passo é informar para o *Babel* qual *preset* iremos usar, para isso basta criar um arquivo no diretório raiz da nossa aplicação chamado **.babelrc** com as seguintes configurações:

```json
{
  "presets": ["node6"]
}
```

Feito isso a aplicação já estará suportando 100% o *ES6* e será possível utilizar as funcionalidades da versão.
O código dessa etapa está disponivel [neste link](https://github.com/waldemarnt/building-testable-apis-with-nodejs-code/tree/step1).

## Configurando o servidor web

Como iremos desenvolver uma aplicação *web* precisaremos de um servidor que nos ajude a trabalhar com requisições *HTTP*, transporte de dados, rotas e etc. Existem muitas opções no universo *Node.js* como o [*Sails.js*](http://sailsjs.com/), [*Hapi.js*](https://hapijs.com/) e [*Koa.js*](http://koajs.com/). Vamos optar pelo [*Express.js*](https://expressjs.com/) por possuir um bom tempo de atividade, muito conteúdo na comunidade e é mantido pela [*Node Foundation*](https://nodejs.org/en/foundation/).

O *Express* é um *framework* para desenvolvimento *web* para *Node.js* inspirado no *Sinatra* que é uma alternativa entre outros frameworks web para a *linguagem ruby*. Criado por *TJ Holowaychuk* o *Express* foi adquirido pela [*StrongLoop*](https://strongloop.com/) em 2014 e é administrado atualmente pela *Node.js Foundation*.

Para começar será necessário instalar dois modulos: o *express* e o *body-parser*. Conforme o exemplo a seguir:

```sh
$ npm install --save express body-parser
```

Quando uma requisição do tipo *POST* ou *PUT* é realizada, o corpo da requisição é transportado como texto. Para que seja possível transportar dados como *JSON* (*JavaScript Object Notation*) por exemplo existe o modulo [*body-parser*](https://github.com/expressjs/body-parser) que é um conjunto de *middlewares* para o *express* que analisa o corpo de uma requisição e transforma em algo definido, no nosso caso, em *JSON*.

Agora vamos criar um arquivo chamado **server.js** no diretório raiz e nele vamos fazer a configuração básica do *express*:

```javascript
import express from 'express';
import bodyParser from 'body-parser';

const app = express();
app.use(bodyParser.json());

app.get('/', (req, res) => res.send('Hello World!'));

app.listen(3000, () => {
  console.log('Example app listening on port 3000!');
});
```

A primeira instrução no exemplo acima é a importação dos módulos *express* e *body-parser* que foram instalados anteriormente. Em seguida uma nova instância do *express* é criada e associada a constante *app*. Para utilizar o *body-parser* é necessário configurar o *express* para utilizar o *middleware*, o *express* possui um método chamado *use* onde é possível passar *middlewares* como parâmetro, no código acima foi passado o **bodyParser.json()** responsável por transformar o corpo das requisições em *JSON*.

A seguir é criada uma rota, os verbos *HTTP* como *GET*, *POST*, *PUT*, *DELETE* são funções no *express* que recebem como parâmetro um padrão de rota, no caso acima **/**, e uma função de *callback* que será chamada quando a rota receber uma requisição. Os parametros **req** e **res** representam *request* (requisição) e *response* (resposta) e serão injetados automaticamente pelo *express* quando a requisição for recebida.
Para finalizar, a função **listen** é chamada recebendo um número referente a porta na qual a aplicação ficará exposta, no nosso caso é a porta 3000.

O último passo é configurar o *package.json* para iniciar nossa aplicação, para isso vamos adicionar um *script* de *start* dentro do objeto *scripts*:

```json
"scripts": {
  "start": "babel-node ./server.js",
  "test": "echo \"Error: no test specified\" && exit 1"
},
```

Alterado o *package.json* basta executar o comando: 

```sh
$ npm start
```

Agora a aplicação estará disponível em **http://localhost:3000/**.
O código dessa etapa está disponivel [neste link](https://github.com/waldemarnt/building-testable-apis-with-nodejs-code/tree/step2).

## Express Middlewares 

  *Middlewares* são funções que tem acesso aos objetos: requisição (*request*), resposta (*response*), e o próximo *middleware* que será chamado, normalmente nomeado como *next*.
  Essas funções são executadas em ordem de chamada, dessa maneira é possível transformar os objetos de requisição e resposta, realizar validações, autenticações e até mesmo terminar a requisição antes que ela execute e lógica escrita na rota. 
  O exemplo a seguir mostra uma aplicação *express* simples com uma rota que devolve um *"Hello world"* quando chamada, nessa rota será adicionado um *middleware*.

```javascript
const express = require('express');
const app = express();

app.get('/', function (req, res) {
  res.send('Hello World!');
});

app.listen(3000);
```

*Middlewares* são apenas funções que recebem os parâmetros requisição (*req*), resposta (*res*) e próximo (*next*), executam alguma lógica e chamam o próximo *middleware*, caso não exista um próximo o *middleware* chama a função da rota.
No exemplo abaixo é criado um *middleware* que vai escrever *"LOGGED"* no terminal.

```javascript
const myLogger = function (req, res, next) {
  console.log('LOGGED');
  next();
};
```

Para que o *express* use essa função é necessário passá-la por parâmetro para a função **use**:

```javascript
const express = require('express');
const app = express();

const myLogger = function (req, res, next) {
  console.log('LOGGED');
  next();
};

app.use(myLogger);

app.get('/', function (req, res) {
  res.send('Hello World!');
});

app.listen(3000);
```

Dessa maneira a cada requisição para qualquer rota o *middleware* será invocado e irá escrever *"LOGGED"* no terminal.
*Middlewares* também podem ser invocados em uma rota específica:

```javascript
const express = require('express');
const app = express();

const myLogger = function (req, res, next) {
  console.log('LOGGED');
  next();
};

app.get('/', myLogger, function (req, res) {
  res.send('Hello World!');
});

app.listen(3000);
```

Esse comportamento é muito útil e colabora com a não duplicação de código, vamos ver mais sobre os *middlewares* no decorrer do livro quando aplicarmos na nossa API.
